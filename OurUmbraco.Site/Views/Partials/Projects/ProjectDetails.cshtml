@inherits OurUmbraco.Our.Models.OurUmbracoTemplatePage
@using OurUmbraco.Forum.Extensions
@using OurUmbraco.Our
@using OurUmbraco.Project
@using OurUmbraco.Project.Services
@using OurUmbraco.Wiki.BusinessLogic
@using System.Text.RegularExpressions;
@using OurUmbraco.Community.Nuget
@using OurUmbraco.Community.People
@using OurUmbraco.Our.Extensions

@{
    var nugetService = new NugetPackageDownloadService();

    var project = Model.Content;

    var owner = Members.GetById(Model.Content.GetPropertyValue<int>("owner"));

    var files = WikiFile.CurrentFiles(project.Id);
    var screenshots = files.Where(x => x.FileType == "screenshot").ToArray();
    var packages = files.Where(x => x.FileType == "package" || x.FileType == "hotfix").ToList();
    var docs = files.Where(x => x.FileType == "docs");
    var source = files.Where(x => x.FileType == "source");

    var file = project.GetPropertyValue<int>("file");
    WikiFile currentRelease = null;
    if (file > 0)
    {
        try
        {
            currentRelease = new WikiFile(file);
        }
        catch (ArgumentException)
        {
            //Not found so swallow and it will remain null
        }
    }

    var totalVotes = Utils.GetProjectTotalVotes(project.Id);
    var currentMember = Members.GetCurrentMember();
    var hasMemberVoted = Members.IsLoggedIn() ? Utils.GetProjectMemberVotes(project.Id, currentMember.Id) > 0 : false;

    var nugetPackageId = nugetService.GetNuGetPackageId(project);

    var ourDownloads = Utils.GetProjectTotalDownloadCount(project.Id);
    var nugetDownloads = 0;

    var nugetPackageDownloads = nugetService.GetNugetPackageDownloads();

    var nugetPackageInfo = nugetPackageDownloads.FirstOrDefault(x => x.PackageId == nugetPackageId);

    if (nugetPackageInfo != null)
    {
        nugetDownloads = nugetPackageInfo.TotalDownLoads;
    }

    var cs = new ContributionService(ApplicationContext.Current.DatabaseContext);
    var contributors = cs.GetContributors(project.Id).ToList();

    var nuGetPackageUrl = project.GetPropertyValue<string>("nuGetPackageUrl");
    var sourceUrl = project.GetPropertyValue<string>("sourceUrl");
    var websiteUrl = project.GetPropertyValue<string>("websiteUrl");
    var demoUrl = project.GetPropertyValue<string>("demoUrl");
    var licenseUrl = project.GetPropertyValue<string>("licenseUrl");
    var supportUrl = project.GetPropertyValue<string>("supportUrl");
    var projectLive = project.GetPropertyValue<bool>("projectLive");
    var isRetired = project.GetPropertyValue<bool>("isRetired");

    var avatarService = new AvatarService();
    var img = avatarService.GetImgWithSrcSet(owner, owner.Name, 100);

    var badges = owner.GetRoles().GetBadges();
}

@if (projectLive)
{
    <section class="package-detail">
        <div class="container">
            <div class="row">
                <div class="col-md-7">
                    <div class="package-detail-content">
                        <div class="vote">
                            <i class="icon-Hearts @(hasMemberVoted ? "liked" : null)"></i>
                            @if (Members.IsLoggedIn() == false || currentMember.Id == owner.Id || hasMemberVoted)
                            {
                                <span>@pluralize(totalVotes, "vote", "votes")</span>
                            }
                            else
                            {
                                <a href="#" id="projectVote" data-id="@project.Id">@pluralize(totalVotes, "vote", "votes")</a>
                            }
                        </div>

                        @if (isRetired)
                        {
                            <div class="package-retired">
                                <h3>This package is marked as retired</h3>

                                @{
                                    var retiredMessage = project.GetPropertyValue<string>("retiredMessage");

                                    if (!string.IsNullOrWhiteSpace(retiredMessage))
                                    {
                                        <p>@Html.Raw(retiredMessage)</p>
                                    }
                                    else
                                    {
                                        <p>This package has been flagged as retired by the package owner. Continue to use at your own risk</p>
                                    }
                                }
                            </div>
                        }

                        <div class="package-detail-description">
                            <h1>@project.Name</h1>

                            @Html.Raw(project.GetPropertyValue<string>("description").CleanHtmlAttributes())

                        </div>

                        @if (screenshots.Any())
                        {
                            <div class="package-detail-screenshots">
                                <h3>Screenshots</h3>

                                <div class="row" style="margin: 20px 0;">

                                    @foreach (var image in screenshots)
                                    {
                                        <a class="fancybox" data-fancybox="package-gallery" href="@Utils.GetScreenshotPath(image.Path)" title="">
                                            <img src="@Utils.GetScreenshotPath(image.Path)?height=154&width=281&bgcolor=fff&format=png" alt="" />
                                        </a>
                                    }

                                </div>
                            </div>
                        }

                        <div class="package-misc">
                            <ul class="tabs">
                                <li class="tab-link current" data-tab="tab-package">Package Files</li>
                                <li class="tab-link" data-tab="tab-docs">Documentation</li>
                                @if (source.Any())
                                {
                                    <li class="tab-link" data-tab="tab-source">Source code</li>
                                }
                                <li class="tab-link" data-tab="tab-archive">Archived Files</li>
                            </ul>

                            <div id="tab-package" class="tab-content current">
                                <h3>Package files</h3>

                                <ul class="search-all-results">

                                    @foreach (var release in packages.Where(x => x.Current && !x.Archived).OrderByDescending(x => x.Version.Version))
                                    {
                                        var uploader = Members.GetById(release.CreatedBy) ?? owner;
                                        <li>
                                            <a href="/FileDownload?id=@release.Id" onclick="ga('PackageMaker.send', 'pageview', window.location.pathname + '/virtual/download/package-files/@(release.Name.Replace("'", ""))')">
                                                <div class="type-icon">
                                                    <i class="icon-Box"></i>
                                                </div>

                                                <div class="type-context">
                                                    <div class="type-name">
                                                        @release.Name
                                                    </div>
                                                    <div class="type-description">
                                                        uploaded @release.CreateDate.ToShortDateString() by @uploader.Name<br>
                                                        <span>For Umbraco: @string.Join(", ", release.Versions.Select(x => x.Name)) & .NET Version: @release.DotNetVersion</span>
                                                        @if (string.IsNullOrWhiteSpace(release.MinimumVersionStrict) == false)
                                                        {
                                                            <span><strong>Note that the minimum version required to install this package is @release.MinimumVersionStrict</strong></span>
                                                        }
                                                    </div>
                                                </div>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <div id="tab-archive" class="tab-content">
                                <h3>Archived files</h3>

                                <ul class="search-all-results">

                                    @foreach (var release in packages.Where(x => x.Archived).OrderByDescending(x => x.Version.Version))
                                    {
                                        var uploader = Members.GetById(release.CreatedBy) ?? owner;
                                        <li>
                                            <a href="/FileDownload?id=@release.Id" onclick="ga('PackageMaker.send', 'pageview', window.location.pathname + '/virtual/download/archived-files/@(release.Name.Replace("'", ""))')">
                                                <div class="type-icon">
                                                    <i class="icon-Box"></i>
                                                </div>

                                                <div class="type-context">
                                                    <div class="type-name">
                                                        @release.Name
                                                    </div>
                                                    <div class="type-description">
                                                        uploaded @release.CreateDate.ToShortDateString() by @uploader.Name<br>
                                                        <span>For Umbraco: @string.Join(", ", release.Versions.Select(x => x.Name)) & .NET Version: @release.DotNetVersion</span>
                                                    </div>
                                                </div>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <div id="tab-docs" class="tab-content">
                                <h3>Documentation</h3>

                                <ul class="search-all-results">

                                    @foreach (var release in docs.Where(x => !x.Archived).OrderByDescending(x => x.Version.Version))
                                    {
                                        var uploader = Members.GetById(release.CreatedBy) ?? owner;
                                        <li>
                                            <a href="/FileDownload?id=@release.Id" onclick="ga('PackageMaker.send', 'pageview', window.location.pathname + '/virtual/download/documentation/@(release.Name.Replace("'", ""))')">
                                                <div class="type-icon">
                                                    <i class="icon-Box"></i>
                                                </div>

                                                <div class="type-context">
                                                    <div class="type-name">
                                                        @release.Name
                                                    </div>
                                                    <div class="type-description">
                                                        uploaded @release.CreateDate.ToShortDateString() by @uploader.Name<br>
                                                    </div>
                                                </div>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <div id="tab-source" class="tab-content">
                                <h3>Source code</h3>

                                <ul class="search-all-results">

                                    @foreach (var release in source.Where(x => !x.Archived).OrderByDescending(x => x.Version.Version))
                                    {
                                        var uploader = Members.GetById(release.CreatedBy) ?? owner;
                                        <li>
                                            <a href="/FileDownload?id=@release.Id" onclick="ga('PackageMaker.send', 'pageview', window.location.pathname + '/virtual/download/source-code/@(release.Name.Replace("'", ""))')">
                                                <div class="type-icon">
                                                    <i class="icon-Box"></i>
                                                </div>

                                                <div class="type-context">
                                                    <div class="type-name">
                                                        @release.Name
                                                    </div>
                                                    <div class="type-description">
                                                        uploaded @release.CreateDate.ToShortDateString() by @uploader.Name<br>
                                                    </div>
                                                </div>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </div>

                        </div>

                        <div class="package-forum-activity">
                            @{
                                var forums = CurrentPage.Children.Where("Visible");
                            }
                            @if (forums.Any())
                            {
                                <h3>Forums</h3>

                                foreach (var forum in forums)
                                {

                                    <a href="@forum.Url" class="forum-thread">
                                        <div class="row">

                                            <div class="col-xs-12 col-md-12">
                                                <div class="forum-thread-text">
                                                    <h3>@forum.Name</h3>
                                                    <p>@forum.forumDescription</p>
                                                </div>
                                            </div>

                                        </div>
                                    </a>
                                }

                            }

                        </div>

                    </div>
                </div>

                <div class="col-md-4 col-md-offset-1">
                    <div class="package-detail-sidebar">

                        <div class="package-download">
                            @if (currentRelease != null && currentRelease.Archived == false && currentRelease.FileType == "package")
                            {
                                <a href="/FileDownload?id=@currentRelease.Id" class="button green" onclick="ga('PackageMaker.send', 'pageview', window.location.pathname + '/virtual/download/package-files/@(currentRelease.Name.Replace("'", ""))')"><i class="icon-Download-alt"></i>&nbsp;Download package<br /><small>version @project.GetPropertyValue("version")</small></a>
                            }
                            else
                            {
                                <div class="button green">No current release</div>
                            }

                            @if (!string.IsNullOrEmpty(nugetPackageId))
                            {

                                <p class="small">or, install via <a href="@nuGetPackageUrl">NuGet</a></p>
                                <span class="pm-nuget">
                                    <input class="pre nuget" value="Install-Package @nugetPackageId" readonly>
                                </span>

                            }
                        </div>

                        <div class="package-creator">
                            <h3>Package owner</h3>

                            <div class="row">
                                <div class="col-xs-12">
                                    <div class="package-creator-information">
                                        @Html.Raw(img)
                                        <div class="text">
                                            <h3>
                                                <a href="/member/@owner.Id">
                                                    @owner.Name
                                                </a>
                                            </h3>
                                            <small>@owner.Name.Split(' ').First() has @owner.Karma() karma points</small>

                                            @if (currentMember != null && (currentMember.IsHq() || currentMember.Id == owner.Id || contributors.Any(c => c.MemberId == currentMember.Id)))
                                            {
                                                <br />
                                                <br />
                                                <a href="/member/profile/projects/details?projectId=@project.Id">Edit package</a>
                                            }
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-xs-12">
                                            <div class="member-details">
                                                @if (badges.Any())
                                                {
                                                    <span class="roles">
                                                        @foreach (var badge in badges)
                                                        {
                                                            if (string.IsNullOrWhiteSpace(badge.Link))
                                                            {
                                                                <span class="@badge.CssClass">@badge.Name</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="@badge.CssClass"><a href="@badge.Link">@badge.Name</a></span>
                                                            }
                                                        }
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (currentRelease != null)
                        {
                            @Html.Action("CompatibilityReport", "ProjectCompatibilityReport", new { projectId = project.Id, fileId = currentRelease.Id })
                        }

                        <div class="package-compatibility-information">
                            <h3>Package Information</h3>

                            <ul>
                                <li>
                                    <span>Package owner:</span> @owner.Name
                                </li>

                                @if (project.HasValue("openForCollab") && project.GetPropertyValue<bool>("openForCollab"))
                                {
                                    if (contributors.Any())
                                    {
                                        <li>
                                            <span>Contributors:</span>
                                            @foreach (var contributor in contributors)
                                            {
                                                var member = Members.GetById(contributor.MemberId);
                                                if (member != null)
                                                {
                                                    <a href="/member/@contributor.MemberId">@member.Name</a>
                                                    if (contributor != contributors.Last())
                                                    {
                                                        <text>, </text>
                                                    }
                                                }
                                            }
                                        </li>
                                    }
                                }
                                <li>
                                    <span>Created:</span> @project.CreateDate.ToShortDateString()
                                </li>
                                <li>
                                    <span>Current version</span> @project.GetPropertyValue("version")
                                </li>

                                @if (project.HasValue("dotNetVersion"))
                                {
                                    <li>
                                        <span>.NET version</span> @project.GetPropertyValue("dotNetVersion")
                                    </li>
                                }

                                <li>
                                    <span>License</span> <a href="@licenseUrl" target="_blank" rel="noreferrer noopener">@project.GetPropertyValue("licenseName")</a>
                                </li>

                                <li>
                                    <span>Downloads on Our:</span> @ourDownloads
                                </li>
                                
                                @if (nugetDownloads > 0)
                                {
                                    <li>
                                        <span>Downloads on NuGet:</span> @nugetDownloads
                                    </li>
                                    <li>
                                        <span>Total downloads : </span> @(nugetDownloads + ourDownloads)
                                    </li>
                                }
                            </ul>
                        </div>

                        @if (!string.IsNullOrEmpty(supportUrl) || !string.IsNullOrEmpty(sourceUrl) || !string.IsNullOrEmpty(websiteUrl) || !string.IsNullOrEmpty(demoUrl))
                        {
                            <div class="package-compatibility-information">
                                <h3>External resources</h3>

                                <ul>
                                    @if (!string.IsNullOrEmpty(sourceUrl))
                                    {
                                        <li>
                                            <a href="@sourceUrl" rel="nofollow">Source code</a>
                                        </li>
                                    }
                                    @if (!string.IsNullOrEmpty(websiteUrl))
                                    {
                                        <li>
                                            <a href="@websiteUrl" rel="nofollow">Package website</a>
                                        </li>
                                    }
                                    @if (!string.IsNullOrEmpty(supportUrl))
                                    {
                                        <li>
                                            <a href="@supportUrl" rel="nofollow">Issue tracker</a>
                                        </li>
                                    }
                                    @if (!string.IsNullOrEmpty(demoUrl))
                                    {
                                        <li>
                                            <a href="@demoUrl" rel="nofollow">Demonstration</a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }


                    </div>
                </div>

            </div>
        </div>
    </section>

    if (Model.Content.HasValue("gaCode"))
    {
        <script type="text/javascript">
             (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
             (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
             m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
             })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
             ga('create', '@(Model.Content.GetPropertyValue("gaCode"))', 'auto', { 'name': 'PackageMaker' });
             ga('PackageMaker.send', 'pageview');
        </script>
    }
}
else
{
    <section class="package-detail">
        <div class="container">
            <div class="row">
                <div class="col-md-7">
                    <div class="package-detail-content">
                        <h2>Package not found</h2>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

@helper pluralize(int count, string oneValue, string pluralValue)
{
    if (count == 1)
    {
        <text>@count @oneValue</text>
    }
    else
    {
        <text>@count @pluralValue</text>
    }
}
