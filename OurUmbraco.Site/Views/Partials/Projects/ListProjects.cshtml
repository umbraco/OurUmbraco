@using OurUmbraco.Repository.Controllers

@inherits OurUmbraco.Our.Models.OurUmbracoTemplatePage
@{
    //This is the main Our project search
    const int pagesToShowLeft = 4;

    var isHome = true;
    if (ViewData["isHome"] != null)
    {
        isHome = (bool)ViewData["isHome"];
    }

    var orderMode = !string.IsNullOrEmpty(Request["orderBy"]) ? Request["orderBy"] : "popularity";
    var dataMode = (string)ViewData["orderBy"];
    if (dataMode != null)
    {
        orderMode = dataMode;
    }

    var page = !string.IsNullOrEmpty(Request["page"]) ? int.Parse(Request["page"]) : 1;
    var category = Request["category"];
    var version = Request["version"];
    var term = Request["term"];
    var pageSize = 10;
    if (ViewData["pageSize"] != null)
    {
        pageSize = (int)ViewData["pageSize"];
    }

    var url = string.Format("orderBy={0}&q={1}&version={2}&category={3}", orderMode, term, version, category);

    var searchOrder = GetSortOrder(orderMode);

    var packageService = new OurUmbraco.Repository.Services
        .PackageRepositoryService(Umbraco, Members, ApplicationContext.Current.DatabaseContext);

    var results = packageService.GetPackages(page - 1, pageSize, category, term, version, searchOrder, false);
}

<div class="packages-listing">
    @foreach (var childContent in results.Packages)
    {
        @RenderProjectHelpers.RenderProjectBox(childContent)
    }
</div>

@if (!isHome)
{
    <nav class="pagination" role="navigation">
        @if (page > 1)
        {
            <a class="prev" href="?page=@(page - 1)&@url">Prev</a>
        }

        @for (var i = (page - 1 > 0 ? page - 1 : 1); i < (page + (pagesToShowLeft - (page - 1 > 0 ? 1 : 0))) && i <= results.Pages; i++)
        {
            <a class="@Umbraco.If(i == page, "active")" href="?page=@i&@url">@i</a>
        }

        @if (page < results.Pages)
        {
            <span>&hellip;</span>
            <a class="next" href="?page=@(page + 1)&@url">Next</a>
        }
    </nav>
}
else
{
    @*
        <nav role="navigation">
            <a href="?page=1&orderBy=@orderMode">See more &raquo;</a>
        </nav>
    *@
}

@functions
{
    public static PackageSortOrder GetSortOrder(string orderMode)
    {
        switch (orderMode.ToLower())
        {
            case "popularity":
                return PackageSortOrder.Popular;
            case "createdate":
                return PackageSortOrder.Latest;
            case "updatedate":
                return PackageSortOrder.Default;
            case "downloads":
                return PackageSortOrder.Downloads;
        }

        return PackageSortOrder.Popular;
    }
}