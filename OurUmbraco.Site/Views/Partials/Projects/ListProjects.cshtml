@using OurUmbraco.Repository.Controllers
@using OurUmbraco.Repository.Models
@inherits OurUmbraco.Our.Models.OurUmbracoTemplatePage
@{
    //This is the main Our project search
    const int pagesToShowLeft = 4;

    var isHome = true;
    if (ViewData["isHome"] != null)
    {
        isHome = (bool)ViewData["isHome"];
    }

    var orderMode = !string.IsNullOrEmpty(Request["orderBy"]) ? Request["orderBy"] : "popularity";
    var dataMode = (string)ViewData["orderBy"];
    if (dataMode != null)
    {
        orderMode = dataMode;
    }

    var page = !string.IsNullOrEmpty(Request["page"]) ? int.Parse(Request["page"]) : 1;
    var category = Request["category"];
    var version = Request["version"];
    var term = Request["term"];
    var pageSize = 10;
    if (ViewData["pageSize"] != null)
    {
        pageSize = (int)ViewData["pageSize"];
    }

    var url = string.Format("orderBy={0}&q={1}&version={2}&category={3}", orderMode, term, version, category);
    
    var searchOrder = GetSortOrder(orderMode);

    var packageService = new OurUmbraco.Repository.Services
        .PackageRepositoryService(Umbraco, Members, ApplicationContext.Current.DatabaseContext);

    var results = packageService.GetPackages(page - 1, pageSize, category, term, version, searchOrder, false);
}

<div class="packages-listing">
    @foreach (var childContent in results.Packages)
    {
        @RenderProjectBox(childContent)
    }
</div>

@if (!isHome)
{
    <nav class="pagination" role="navigation">
        @if (page > 1)
        {
            <a class="prev" href="?page=@(page - 1)&@url">Prev</a>
        }

        @for (var i = (page - 1 > 0 ? page - 1 : 1); i < (page + (pagesToShowLeft - (page - 1 > 0 ? 1 : 0))) && i <= results.Pages; i++)
        {
            <a class="@Umbraco.If(i == page, "active")" href="?page=@i&@url">@i</a>
        }

        @if (page < results.Total)
        {
            <span>&hellip;</span>
            <a class="next" href="?page=@(page + 1)&@url">Next</a>
        }
    </nav>
}
else
{
    @*
        <nav role="navigation">
            <a href="?page=1&orderBy=@orderMode">See more &raquo;</a>
        </nav>
    *@
}


@helper RenderProjectBox(Package projectContent)
{
    <a class="package-box" href="@projectContent.Url">
        <div class="package-image">
            @RenderProjectImage(projectContent.Image)
        </div>
        <div class="package-info">
            <h3>@projectContent.Name</h3>
            <span class="text-fadeout"></span>
            <p class="small">@projectContent.Summary</p>
        </div>

        <div class="other">
            <div class="package-badge">
                <span class="package-number">@projectContent.VersionRange</span>
            </div>
            <div class="stats">
                <span class="karma">
                    @projectContent.Likes <span><i class="icon-Hearts color-red"></i></span>
                </span>
                <span class="downloads">
                    @projectContent.Downloads <span><i class="icon-Download-alt"></i></span>
                </span>
            </div>
        </div>
    </a>
}

@helper RenderProjectImage(string defaultScreenshot)
{
    <img src="@defaultScreenshot?width=64&height=64&bgcolor=fff&format=png"
         srcset="@defaultScreenshot?width=128&height=128&bgcolor=fff&format=png 2x,
             @defaultScreenshot?width=192&height=192&bgcolor=fff&format=png 3x" />
}

@functions{
    public PackageSortOrder GetSortOrder(string orderMode)
    {
        switch (orderMode.ToLower())
        {
            case "popularity":
                return PackageSortOrder.Popular;
            case "createdate":
                return PackageSortOrder.Latest;
            case "updatedate":
                return PackageSortOrder.Default;
            case "downloads":
                return PackageSortOrder.Downloads;
        }

        return PackageSortOrder.Popular;
    }
}
