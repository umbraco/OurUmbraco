@using Examine.SearchCriteria
@using OurUmbraco.Our
@using OurUmbraco.Our.Examine
@using OurUmbraco.Project
@inherits OurUmbraco.Our.Models.OurUmbracoTemplatePage
@{
    //This is the main Our project search
    const int pagesToShowLeft = 4;

    var isHome = true;
    if (ViewData["isHome"] != null)
    {
        isHome = (bool)ViewData["isHome"];
    }

    var orderMode = !string.IsNullOrEmpty(Request["orderBy"]) ? Request["orderBy"] : "popularity";
    var dataMode = (string)ViewData["orderBy"];
    if (dataMode != null)
    {
        orderMode = dataMode;
    }


    var page = !string.IsNullOrEmpty(Request["page"]) ? int.Parse(Request["page"]) : 1;
    var category = Request["category"];
    var version = Request["version"];
    var term = Request["term"];
    var pageSize = 10;
    if (ViewData["pageSize"] != null)
    {
        pageSize = (int)ViewData["pageSize"];
    }

    var searchFilters = new SearchFilters(BooleanOperation.And);
    //MUST be live
    searchFilters.Filters.Add(new SearchFilter("projectLive", "1"));

    if (orderMode == "popularity")
    {
        searchFilters.Filters.Add(new SearchFilter("isRetired", "0"));
    }

    var filters = new List<SearchFilters> { searchFilters };

    if (!string.IsNullOrEmpty(category))
    {
        var categoryFilters = new SearchFilters(BooleanOperation.Or);
        //NOTE: categories are indexed as lower case and are not tokenized so must be an exact match and therefore require quotes

        if (category.ToLowerInvariant() == "uaas".ToLowerInvariant())
        {
            categoryFilters.Filters.Add(new SearchFilter("worksOnUaaS", string.Format("\"{0}\"", "True")));
        }
        else
        {
            categoryFilters.Filters.Add(new SearchFilter("categoryFolder", string.Format("\"{0}\"", category.ToLowerInvariant().Trim())));
        }

        filters.Add(categoryFilters);
    }

    if (!string.IsNullOrEmpty(version))
    {
        //need to clean up this string, it could be all sorts of things
        var parsedVersion = version.GetFromUmbracoString();
        if (parsedVersion != null)
        {
            var fromVersion = parsedVersion.GetNumericalValue();
            var toVersion = new Version(parsedVersion.Major, 999, 999).GetNumericalValue();
            var versionFilters = new SearchFilters(BooleanOperation.Or);
            versionFilters.Filters.Add(new RangeSearchFilter("num_version", fromVersion, toVersion));
            filters.Add(versionFilters);
        }
    }

    var examineOrder = orderMode;
    if (examineOrder == "popularity")
    {
        examineOrder = string.Concat(orderMode, "[Type=INT]");
    }
    else if (examineOrder == "createDate")
    {
        examineOrder = string.Concat(orderMode, "[Type=LONG]");
    }

    //TODO: cache for 1 minute with this key just need to ensure the enumerable in the result is finalized
    //var key = string.Format("ListProjects.{0}.{1}.{2}.{3}.{4}", page, orderMode, term, version, category);
    var searcher = new OurSearcher(term,
    "project", null, examineOrder,
    filters: filters, maxResults: pageSize * page);

    var search = searcher.Search("projectSearcher");
    var total = search.SearchResults.TotalItemCount;
    var pages = (total / pageSize) + 1;

    var result = search.SearchResults.Skip((page - 1) * pageSize).Take(pageSize);

    var url = string.Format("orderBy={0}&q={1}&version={2}&category={3}", orderMode, term, version, category);
}

@functions{
    public string GetField(IDictionary<string, string> fields, string field, string defaultVal = "")
    {
        if (fields != null && fields.ContainsKey(field))
            return fields[field];

        return defaultVal;
    }

    public string ParseVersion(SearchResult result)
    {
        var versions = result.GetValues("versions").ToList();
        if (result.Fields.Keys.Contains("versions"))
        {
            versions.Add(result["versions"]);
        }

        var orderedVersions = versions
            .Select(x =>
            {
                Version v;
                return Version.TryParse(x, out v) ? v : null;
            }).WhereNotNull()
            .OrderByDescending(x => x)
            .ToArray();

        if (orderedVersions.Any() == false)
            return "n/a";

        if (orderedVersions.Length == 1)
            return orderedVersions.First().ToString();

        if (orderedVersions.Min() == orderedVersions.Max())
            return orderedVersions.Min().ToString();

        return orderedVersions.Min() + " - " + orderedVersions.Max();
    }
}
<div class="packages-listing">
    @foreach (var childPage in result)
    {
        var childContent = Umbraco.TypedContent(childPage.Id);
        if (childContent != null)
        {
            @RenderProjectBox(childContent, childPage)
        }
    }
</div>

@if (!isHome)
{
    <nav class="pagination" role="navigation">
        @if (page > 1)
        {
            <a class="prev" href="?page=@(page - 1)&@url">Prev</a>
        }

        @for (var i = (page - 1 > 0 ? page - 1 : 1); i < (page + (pagesToShowLeft - (page - 1 > 0 ? 1 : 0))) && i <= pages; i++)
        {
            <a class="@Umbraco.If(i == page, "active")" href="?page=@i&@url">@i</a>
        }

        @if (page < pages)
        {
            <span>&hellip;</span>
            <a class="next" href="?page=@(page + 1)&@url">Next</a>
        }
    </nav>
}
else
{
    @*
    <nav role="navigation">
        <a href="?page=1&orderBy=@orderMode">See more &raquo;</a>
    </nav>
    *@
}


@helper RenderProjectBox(IPublishedContent projectContent, SearchResult projectResult)
{
    <a class="package-box" href="@projectContent.Url">
        <div class="package-image">
            @RenderProjectImage(projectContent)
        </div>
        <div class="package-info">
            <h3>@projectContent.Name</h3>
            <span class="text-fadeout"></span>
            <p class="small">@Html.Raw(GetField(projectResult.Fields, "body", "No description available").StripHtml().Truncate(50))</p>
        </div>

        <div class="other">
            <div class="package-badge">
                <span class="package-number">@ParseVersion(projectResult)</span>
            </div>
            <div class="stats">
                <span class="karma">
                    @GetField(projectResult.Fields, "karma", "0")<span><i class="icon-Hearts color-red"></i></span>
                </span>
                <span class="downloads">
                    @GetField(projectResult.Fields, "downloads", "0")<span><i class="icon-Download-alt"></i></span>
                </span>
            </div>
        </div>
    </a>
}

@helper RenderProjectImage(IPublishedContent projectContent)
{
    var defaultScreenshot = "/css/img/package2.png";
    if (projectContent != null)
    {
        defaultScreenshot = projectContent.GetPropertyValue("defaultScreenshotPath", false, "/css/img/package2.png");
    }

    <img src="@Utils.GetScreenshotPath(defaultScreenshot)?width=64&height=64&bgcolor=fff&format=png"
         srcset="@Utils.GetScreenshotPath(defaultScreenshot)?width=128&height=128&bgcolor=fff&format=png 2x,
             @Utils.GetScreenshotPath(defaultScreenshot)?width=192&height=192&bgcolor=fff&format=png 3x" />

}