@using OurUmbraco.Community.GitHub
@using OurUmbraco.Our.Models.GitHub
@model List<Issue>
<tr>
    <td colspan="11">
        @foreach (var issue in Model)
        {
            var gitHubService = new GitHubService();
            var users = gitHubService.GetTeam(issue.RepositoryName).Members.Select(x => x.ToLower());
            var link = $"https://github.com/umbraco/{issue.RepositoryName}/pull/{issue.Number}";

            <p><a href="@link" target="_blank" rel="noreferrer noopener">#@issue.Number (@issue.RepositoryName) | @issue.Title</a></p>

            var firstTeamComment = issue.Comments.OrderBy(x => x.CreateDateTime).FirstOrDefault(x => x.User != null && users.Contains(x.User.Login.ToLowerInvariant()));
            if (firstTeamComment != null)
            {
                <p>Comment: @firstTeamComment.CreateDateTime.ToString("yyyy-MM-dd HH:mm") / @firstTeamComment.User.Login</p>
            }

            var firstTeamEvent = issue.Events.OrderBy(x => x.CreateDateTime).FirstOrDefault(x => x.Actor != null && users.Contains(x.Actor.Login.ToLowerInvariant()) && x.Name != "mentioned" && x.Name != "subscribed"  && (x.Assigner != null && x.Assigner.Login != "wafflebot[bot]"));
            if (firstTeamEvent != null)
            {
                string labels = null;
                if (firstTeamEvent.Name == "labeled")
                {
                    labels = string.Join(",", issue.Labels.Select(x => x.Name));
                }

                <p>
                    Event: @firstTeamEvent.CreateDateTime.ToString("yyyy-MM-dd HH:mm") / @firstTeamEvent.Name @(string.IsNullOrWhiteSpace(labels) ? null : labels) / @firstTeamEvent.Actor.Login
                </p>
            }

            Event firstTeamReview = null;
            if (issue.Reviews != null)
            {
                firstTeamReview = issue.Reviews.OrderBy(x => x.CreateDateTime).FirstOrDefault(x => x.Actor != null && users.Contains(x.Actor.Login.ToLowerInvariant()));
                if (firstTeamReview != null)
                {
                    <p>Review: @firstTeamReview.CreateDateTime.ToString("yyyy-MM-dd HH:mm") / @firstTeamReview.Actor.Login</p>
                }
            }

            if (firstTeamComment == null && firstTeamEvent == null && firstTeamReview == null)
            {
                // Special case: if a user closes their own issue we can count that as a team event
                if (issue.State == "closed")
                {
                    var closedEvent = issue.Events.FirstOrDefault(x => x.Name == "closed");
                    if (closedEvent != null)
                    {
                        // Nice one: if a user deletes themselves from GitHub, the Actor becomes.. null :/
                        if (closedEvent.Actor == null || issue.User.Login == closedEvent.Actor.Login)
                        {
                            <p>User self-closed the issue</p>
                        }
                    }
                }
                else
                {
                    <p style="color: red; font-weight: bold;">NADA!</p>
                }
            }
        }
    </td>
</tr>