@inherits UmbracoTemplatePage
@using System.Text.RegularExpressions
@using OurUmbraco.Repository.Services
@{
    Layout = "~/Views/Master.cshtml";
    
    const string newDocsBaseUrl = "https://docs.umbraco.com";
    var redirectLink = GetSuggestedRedirectLink(Request.Url.ToString());
    var isv7 = IsVersionSevenLink(Request.Url.ToString());
    
    var docVersionService = new DocumentationVersionService();
    var currentVersion = docVersionService.GetCurrentMajorVersion();
    var altVersions = docVersionService.GetAlternateDocumentationVersions(Request.Url, true).ToList();

    var currentDocVersion = altVersions.FirstOrDefault(x => x.IsCurrentPage);
    
    var dontRedirect = currentDocVersion?.VersionRemoved != null;
    if (currentDocVersion?.NeedsV8Update != null && currentDocVersion.NeedsV8Update == "true")
    {
        dontRedirect = true;
    }

    string documentedRedirectLink = null;
    if (currentDocVersion != null && !string.IsNullOrWhiteSpace(currentDocVersion.RedirectLink))
    {
        documentedRedirectLink = newDocsBaseUrl + currentDocVersion.RedirectLink;
    }
}
@section SeoMetaData {
    @if (currentDocVersion != null)
    {
        if (currentDocVersion.MetaTitle != null)
        {
            <title>@currentDocVersion.MetaTitle - Our Umbraco</title>
        }
        else
        {
            <title>
                @{
                    var title = string.Empty;
                    var navigationTitle = HttpContext.Current.Items["topicTitle"];
                    if (navigationTitle != null)
                    {
                        title = navigationTitle.ToString();
                    }

                    if (string.IsNullOrWhiteSpace(title) == false)
                    {
                        if (Model.Content.Name.ToString().ToLower() == "documentation")
                        {
                            var path = title.Split(new string[] { " - " }, StringSplitOptions.None);

                            var textInfo = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                            var firstUrlPath = textInfo.ToTitleCase(path[0]).Replace('-', ' ');
                            var lastUrlPath = textInfo.ToTitleCase(path[path.Length - 1]).Replace('-', ' ');


                            <text>@firstUrlPath, @lastUrlPath - Our Umbraco</text>
                        }
                        else
                        {
                            <text>@title - @Model.Content.Name - Our Umbraco</text>
                        }
                    }
                }
            </title>
        }
        //If no description is set this will just be empty - which is what it used to be anyways, could think of adding some sort of fallback?
        <meta name="description" content="@currentDocVersion.MetaDescription" />
    }
    else
    {
        <title>
            @{
                var title = string.Empty;
                var navigationTitle = HttpContext.Current.Items["topicTitle"];
                if (navigationTitle != null)
                {
                    title = navigationTitle.ToString();
                }

                if (string.IsNullOrWhiteSpace(title) == false)
                {
                    <text>@title - </text>
                }
            }
            @Model.Content.Name - our.umbraco.com
        </title>
        <meta name="description" content="">
        <meta name="robots" content="noindex">
    }
    
    @if (documentedRedirectLink != null)
    {
        <link rel="canonical" href="@documentedRedirectLink"/>
    }
    else
    {
        if (redirectLink != null)
        {
            @Html.Raw($"<link rel=\"canonical\" href=\"{redirectLink}\" />");
        }
        else
        {
            @Html.Raw($"<link rel=\"canonical\" href=\"{newDocsBaseUrl}\" />");
        }
    }
}

<div class="has-sidebar">
    <div class="documentation">
        <div class="page-content">
            <div class="sidebar-area">
                <div class="sidebar-content">
                    <div class="content-wrapper">
                        @Html.Partial("~/Views/Partials/Documentation/Navigation.cshtml")
                    </div><!-- .content-wrapper -->
                </div><!-- .sidebar-content -->
            </div><!-- .sidebar-area-->
            <div class="main-area">
                <div class="main-content">
                    <div class="content-wrapper">
                        <div>
                            @Html.Partial("~/Views/Partials/Documentation/Breadcrumb.cshtml")
                        </div>
                        @if (isv7 == false && dontRedirect == false)
                        {
                            <div style="width: 100%;" class="alertbar__red">

                                <h1 style="color: black; font-size: 50px; text-align: center; line-height: 50px; text-decoration: underline;">We have moved!</h1>
                                <p style="font-size:20px; text-align: center; line-height: 50px;">You are currently looking at documentation for Umbraco 8 and older versions. <br>
                                    @if (documentedRedirectLink != null)
                                    {
                                        <span>Go to <a href="@documentedRedirectLink">@documentedRedirectLink.Replace("https://", "")</a> for documentation for Umbraco 9 and newer versions.</span>
                                    }
                                    else if (redirectLink != null)
                                    {
                                        <span>An automated guess is that <a href="@redirectLink">@redirectLink.Replace("https://", "")</a> could be the link to the new documentation for Umbraco 9 and newer versions.</span>
                                    }
                                    else
                                    {
                                        <span>Go to <a href="@newDocsBaseUrl">@newDocsBaseUrl.Replace("https://", "")</a> for documentation for Umbraco 9 and newer versions.</span>
                                    }
                                </p>
                            </div>
                        }
                        <div class="search-big">
                            <div class="textSearch">
                                <input type="search" class="docs-search-input" required placeholder="Search for documentation">
                                <label for="search">Search for documentation</label>
                            </div>
                            <select class="version-search-select">
                                <option value="8" selected="@(currentVersion == "8"? "selected" : null)">v8</option>
                                <option value="7" selected="@(currentVersion == "7"? "selected" : null)">v7</option>
                                <option value="6" selected="@(currentVersion == "6"? "selected" : null)">v6</option>
                            </select>
                        </div>
                        <ul class="search-all-results docs-search-listing"></ul>
                        <div id="markdown-docs" class="docs-default-listing markdown-syntax">
                            @Html.Partial("~/Views/Partials/Documentation/DisplayMarkdown.cshtml", null, new ViewDataDictionary { { "AltVersions", altVersions } })
                        </div>
                    </div><!-- .content-wrapper -->
                </div><!-- .main-content -->
            </div><!-- .main-area -->
        </div><!-- .page-content -->
        <script type="text/template" class="search-item-docs">
            <li>
                <a href="{{ url }}">
                    <div class="type-icon">
                        <i class="icon-Book-alt"></i>
                    </div>
                    <div class="type-context">
                        <div class="type-name">
                            {{ name }}
                        </div>
                        <div class="type-description">
                            {{ body }}
                        </div>
                    </div>
                </a>
            </li>
        </script>
    </div>
</div>

@functions
{
    public string GetSuggestedRedirectLink(string requestUrl)
    {
        const string newDocsBaseUrl = "https://docs.umbraco.com";
        string redirectLink = null;
        
        var formsPattern = new Regex(@"\/documentation\/Add-ons\/UmbracoForms\/(.*)", RegexOptions.IgnoreCase);
        var deployPattern = new Regex(@"\/documentation\/Add-ons\/Umbraco-Deploy\/(.*)", RegexOptions.IgnoreCase);
        var cloudPattern = new Regex(@"\/documentation\/Umbraco-Cloud\/(.*)", RegexOptions.IgnoreCase);
        var heartcorePattern = new Regex(@"\/documentation\/Umbraco-Heartcore\/(.*)", RegexOptions.IgnoreCase);
        var tutorialsPattern = new Regex(@"\/documentation\/Tutorials\/(.*)", RegexOptions.IgnoreCase);
        var contributePattern = new Regex(@"\/documentation\/Contribute\/(.*)", RegexOptions.IgnoreCase);
        var gettingStartedPattern = new Regex(@"\/documentation\/Getting-Started\/(.*)", RegexOptions.IgnoreCase);
        var generalDocPattern = new Regex(@"\/documentation\/(.*)", RegexOptions.IgnoreCase);

        if (formsPattern.IsMatch(requestUrl))
        {
            redirectLink = newDocsBaseUrl + GetRedirectLink(formsPattern, "/umbraco-forms/", requestUrl);
        }
        else if (deployPattern.IsMatch(requestUrl))
        {
            redirectLink = newDocsBaseUrl + GetRedirectLink(deployPattern, "/umbraco-deploy/", requestUrl);
        }
        else if (cloudPattern.IsMatch(requestUrl))
        {
            redirectLink = newDocsBaseUrl + GetRedirectLink(cloudPattern, "/umbraco-cloud/", requestUrl);
        }
        else if (heartcorePattern.IsMatch(requestUrl))
        {
            redirectLink = newDocsBaseUrl + GetRedirectLink(heartcorePattern, "/umbraco-heartcore/", requestUrl);
        }
        else if (tutorialsPattern.IsMatch(requestUrl))
        {
            redirectLink = newDocsBaseUrl + GetRedirectLink(tutorialsPattern, "/umbraco-cms/tutorials/", requestUrl);
        }
        else if (contributePattern.IsMatch(requestUrl))
        {
            redirectLink = newDocsBaseUrl + GetRedirectLink(contributePattern, "/contribute/", requestUrl);
        }
        else if (gettingStartedPattern.IsMatch(requestUrl))
        {
            redirectLink = newDocsBaseUrl + GetRedirectLink(gettingStartedPattern, "/getting-started/", requestUrl);
        }
        else if (generalDocPattern.IsMatch(requestUrl))
        {
            redirectLink = newDocsBaseUrl + GetRedirectLink(generalDocPattern, "/umbraco-cms/", requestUrl);
        }
        
        return redirectLink;
    }
    
    public string GetRedirectLink(Regex pattern, string urlPrefix, string requestUrl)
    {
        if (IsVersionSevenLink(requestUrl)) return null;

        var match = pattern.Match(requestUrl);

        if (match.Groups.Count < 2)
        {
            return null;
        }

        var path = match.Groups[1].ToString().ToLowerInvariant();

        return urlPrefix + path;
    }

    public static bool IsVersionSevenLink(string requestUrl)
    {
    // Don't add redirects for v7 docs
        var uri = new Uri(requestUrl);
        var uriPath = uri.GetAbsolutePathDecoded();
        if (uriPath.EndsWith("-v7") || uriPath.EndsWith("-v7/"))
        {
            return true;
        }

        return false;
    }
}
