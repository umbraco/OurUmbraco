@using OurUmbraco.Forum.Extensions
@using OurUmbraco.Our.Services
@using System.Globalization
@using OurUmbraco.Our.Extensions
@inherits UmbracoTemplatePage
@{
    Layout = "Master.cshtml";
    if (Members.IsTeamUmbraco() == false)
    {
        Response.Redirect("/");
    }

    var repoManagementService = new RepositoryManagementService();
    var categorizedIssues = new List<RepositoryManagementService.GitHubCategorizedIssues>();
    var startDate = new DateTime(2019, 03, 18);

    var showPulls = false;
    var showPullsQueryString = Request.QueryString["pulls"];
    if (string.IsNullOrWhiteSpace(showPullsQueryString) == false && showPullsQueryString == "true")
    {
        showPulls = true;
    }

    var pendingForUser = false;
    var pendingForUserQueryString = Request.QueryString["user"];
    if (string.IsNullOrWhiteSpace(pendingForUserQueryString) == false)
    {
        pendingForUser = true;
        categorizedIssues = repoManagementService.GetPendingItemsForUser(pendingForUserQueryString);
    }

    var totalIssues = 0;

    var repoQuerystring = Request.QueryString["repository"]  ?? string.Empty;
    var showOldIssuesQuerystring = Request.QueryString["showOldIssues"]  ?? string.Empty;

    var labelQuerystring = Request.QueryString["label"];
    if (pendingForUser == false)
    {
        var allOpenIssues = repoManagementService.GetAllOpenIssues(showPulls);

        if (string.IsNullOrWhiteSpace(repoQuerystring) == false)
        {
            allOpenIssues.ForEach(x => x.Issues.RemoveAll(y => y.RepositoryName.InvariantEquals(repoQuerystring) == false));
        }

        if (string.IsNullOrWhiteSpace(labelQuerystring) == false)
        {
            allOpenIssues.ForEach(x => x.Issues.RemoveAll(y => y.Labels.Any(z => z.Name.InvariantEquals(labelQuerystring)) == false));
        }

        if (string.IsNullOrWhiteSpace(showOldIssuesQuerystring))
        {
            allOpenIssues.ForEach(x => x.Issues.RemoveAll(y => y.CreateDateTime <= startDate));
        }

        categorizedIssues = allOpenIssues.OrderBy(x => x.SortOrder).ToList();


        foreach (var categories in categorizedIssues)
        {
            totalIssues = totalIssues + categories.Issues.Count;
        }
    }

    var repositories = categorizedIssues.SelectMany(x => x.Issues).Select(x => x.RepositoryName).Distinct().ToList();

    var fromMonth = DateTime.Now.AddYears(-1).Month;
    var fromYear = DateTime.Now.AddYears(-1).Year;

    var toMonth = DateTime.Now.Month;
    var toYear = DateTime.Now.Year;
}

<style type="text/css">
    .page, .container {
        max-width: none;
        padding: 0;
        margin: 0;
    }

    .flex-container {
        display: flex;
        flex-direction: column;
        font-size: 14px;
        margin: 0 4px 0 0;
        float: left;
    }

        .flex-container h5 {
            max-width: 306px;
        }
        
        .flex-container div.issue a {
            overflow-wrap: break-word;
        }

        .flex-container div.issue {
            max-width: 306px;
            float: left;
            padding: 4px;
            margin-bottom: 4px;
            border: 1px solid silver;
            border-radius: 8px;
        }

        .flex-container div.author {
            max-width: 46px;
            float: left;
        }

        .flex-container div.details {
            max-width: 250px;
            float: left;
        }

        .flex-container .author img {
            width: 40px;
            height: 40px;
            margin: 0 6px 0 0;
            float: left;
            border-radius: 20px;
        }

        .flex-container a {
            color: #FF6E00;
            text-decoration: none;
            font-weight: bold;
        }


    .assignees {
        float: right;
    }

        .assignees img {
            width: 20px;
            height: 20px;
            margin: 1px;
            border-radius: 10px;
        }

    .labels {
        float: left;
        margin: 2px;
        clear: both;
    }

    span.label {
        padding: 4px;
        font-size: 10px;
        border-radius: 4px;
        margin-top: 2px;
        display: inline-block;
    }
    
    span.label a {
        color: black;
        font-weight: normal;
        text-decoration: underline;
    }

    .flex-container small, .overview small.comment {
        font-size: 10px;
        float: left;
    }

    span.error {
        color: red;
    }


    .gauge {
        height: 250px;
        width: 350px;
    }

    .chart {
        height: 500px;
        width: 100%;
        clear: both;
        display: block;
    }

    .stats {
        height: 550px;
        display: inline-block;
        width: 100%;
        clear: both;
    }

    #body {
        margin-bottom: 50px;
    }

    fieldset {
        float: left;
        margin-right: 8px;
    }

    section.form, .row {
        margin: 0;
        padding: 0;
    }
</style>
<script src="/scripts/amcharts/core.js"></script>
<script src="/scripts/amcharts/charts.js"></script>

<div id="body" class="page markdown-syntax">
    <div>
        @Html.Action("Render", "Breadcrumb", new { linkToCurrent = false })
    </div>

    @if (showPulls)
    {
        <h1>Pull requests status - @totalIssues open PRs @(string.IsNullOrWhiteSpace(showOldIssuesQuerystring) ? $"[SINCE: {startDate.ToString("yyyy-MM-dd")}]" : string.Empty)</h1>
    }
    else
    {
        <h1>Issue tracker status - @totalIssues open issues  @(string.IsNullOrWhiteSpace(showOldIssuesQuerystring) ? $"[SINCE: {startDate.ToString("yyyy-MM-dd")}]" : string.Empty)</h1>
    }

    <section class="form">
        <div class="container">
            <div class="row form">
                <div class="col-md-12">
                    <form method="get">
                        <fieldset>
                            <p>
                                <input type="radio" id="pulls_issues" name="pulls" value="false" checked="@(!showPulls)" /><label for="pulls_issues"> Issues</label>
                                <input type="radio" id="pulls_pulls" name="pulls" value="true" checked="@showPulls" /><label for="pulls_pulls"> Pull requests </label>
                            </p>
                        </fieldset>
                        <fieldset>
                            <p>
                                <select name="repository">
                                    <option value="">Filter by repository</option>
                                    @foreach (var repo in repositories)
                                    {
                                        <option value="@repo" selected="@(repoQuerystring == repo)">@repo</option>
                                    }
                                </select>

                            </p>
                        </fieldset>
                        <fieldset>
                            <input type="submit" class="button" value="Filter" />
                        </fieldset>
                    </form>
                </div>
            </div>
        </div>
    </section>

    <section>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    @foreach (var category in categorizedIssues.Where(x => x.Issues.Any()))
                    {
                        <div class="flex-container">

                            <h5>@category.CategoryDescription (@category.Issues.Count issues)</h5>


                            @foreach (var issue in category.Issues.OrderByDescending(x => x.CreateDateTime))
                            {
                                <div class="issue">
                                    <div class="author">
                                        <a href="https://github.com/@issue.User.Login" target="_blank" rel="noreferrer noopener">
                                            <img src="@issue.User.AvatarUrl" title="@issue.User.Login" />
                                        </a>
                                    </div>
                                    <div class="details">
                                        <span class="assignees">
                                            @foreach (var assignee in issue.Assignees)
                                            {
                                                <a href="https://github.com/@assignee.Login" target="_blank" rel="noreferrer noopener">
                                                    <img src="@assignee.AvatarUrl" title="Assigned to @assignee.Login" />
                                                </a>
                                            }
                                        </span>
                                        <a href="@issue.Link" target="_blank" rel="noreferrer noopener" title="@issue.Description">@issue.Title #@issue.Number</a><br />
                                        <small class="comment">@issue.RepositoryName</small><br />
                                        <small>
                                            @{
                                                var dateCssClass = string.Empty;
                                                var businessDays = issue.CreateDateTime.ToLocalTime().BusinessDaysSince();
                                            }
                                            @if (category.CategoryKey == RepositoryManagementService.CategoryKey.NoReply)
                                            {
                                                if (businessDays > 2)
                                                {
                                                    dateCssClass = "error";
                                                }
                                            }
                                            <span @(dateCssClass != string.Empty ? "class=" + dateCssClass : null)>
                                                <span title="Created: @issue.CreateDateTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture) | Updated: @issue.UpdateDateTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture)">Created ~@businessDays business @(businessDays > 1 ? "days" : "day") ago.</span>
                                                @if (issue.InThisCategorySince != null)
                                                {
                                                    <br />
                                                    <span title="Since: @issue.InThisCategorySince.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture)">In this category for ~@(issue.InThisCategorySince.Value.BusinessDaysSince()) business days.</span>
                                                }
                                            </span>
                                        </small>
                                        <div class="labels">
                                            @foreach (var label in issue.Labels)
                                            {
                                                <span class="label" style="background-color: #@label.Color"><a href="@(BuildQueryStringUrl(new[] {"label=" + label.Name }))">@label.Name</a></span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>

    @*@if (showPulls == false)
    {
        <section class="stats">
            <div class="container">
                <div class="row">
                    <h5>Issues: created and closed</h5>
                    <div class="col-md-12">
                        <div id="GroupedIssuesClosed" class="chart"></div>
                    </div>
                </div>
            </div>
        </section>
        <section class="stats">
            <div class="container">
                <div class="row">
                    <h5>Issues: first response time</h5>
                    <div class="col-md-12">
                        <div id="IssuesFirstResponseTime" class="chart"></div>
                    </div>
                </div>
            </div>
        </section>
        <section class="stats">
            <div class="container">
                <div class="row">
                    <h5>Issues: closing time</h5>
                    <div class="col-md-12">
                        <div id="IssuesClosingTime" class="chart"></div>
                    </div>
                </div>
            </div>
        </section>
    }*@

</div>

@*<script>
            var groupedPrsChart = am4core.create("GroupedIssuesClosed", am4charts.XYChart);
            groupedPrsChart.dataSource.url = "/umbraco/api/IssuesStatistics/GetGroupedIssuesData/?fromDay=0&fromMonth=@(fromMonth)&fromYear=@(fromYear)&toDay=0&toMonth=@(toMonth)&toYear=@(toYear)&repository=@(repoQuerystring)";

            groupedPrsChart.scrollbarX = new am4core.Scrollbar();
            groupedPrsChart.legend = new am4charts.Legend();
            groupedPrsChart.colors.step = 2;

            var categoryAxis = groupedPrsChart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "GroupName";
            categoryAxis.renderer.grid.template.location = 0;

            var valueAxis = groupedPrsChart.yAxes.push(new am4charts.ValueAxis());
            valueAxis.min = 0;
            valueAxis.renderer.minWidth = 35;

            var prsClosed = groupedPrsChart.series.push(new am4charts.ColumnSeries());
            prsClosed.name = "Issues closed";
            prsClosed.dataFields.categoryX = "GroupName";
            prsClosed.dataFields.valueY = "NumberClosed";
            prsClosed.stacked = true;

            var prsClosedColumnTemplate = prsClosed.columns.template;
            prsClosedColumnTemplate.width = am4core.percent(80);
            prsClosedColumnTemplate.tooltipText = "{name}: {valueY.value}";

            var prsCreated = groupedPrsChart.series.push(new am4charts.ColumnSeries());
            prsCreated.name = "Issues created";
            prsCreated.dataFields.categoryX = "GroupName";
            prsCreated.dataFields.valueY = "NumberCreated";
            prsCreated.stacked = false;

            var prsCreatedColumnTemplate = prsCreated.columns.template;
            prsCreatedColumnTemplate.width = am4core.percent(80);
            prsCreatedColumnTemplate.tooltipText = "{name}: {valueY.value}";

            ////////////////////////////////////////////////////////////////////////////////////////////////////

            var issuesFirstResponseAverageChart = am4core.create("IssuesFirstResponseTime", am4charts.XYChart);
            issuesFirstResponseAverageChart.dataSource.url = "/umbraco/api/IssuesStatistics/GetGroupedIssuesData/?fromDay=0&fromMonth=@(fromMonth)&fromYear=@(fromYear)&toDay=0&toMonth=@(toMonth)&toYear=@(toYear)&repository=@(repoQuerystring)";
    
            issuesFirstResponseAverageChart.scrollbarX = new am4core.Scrollbar();
            issuesFirstResponseAverageChart.legend = new am4charts.Legend();

            var issuesFirstResponseAverageDateAxis = issuesFirstResponseAverageChart.xAxes.push(new am4charts.DateAxis());
            var issuesFirstResponseAverageValueAxis = issuesFirstResponseAverageChart.yAxes.push(new am4charts.ValueAxis());
    
            var issuesFirstResponseAverageSeries = issuesFirstResponseAverageChart.series.push(new am4charts.LineSeries());
            issuesFirstResponseAverageSeries.name = "Response time (average)";
            issuesFirstResponseAverageSeries.dataFields.dateX = "GroupName";
            issuesFirstResponseAverageSeries.dataFields.valueY = "IssueAverageFirstCommentTimesInHours";
            issuesFirstResponseAverageSeries.sequencedInterpolation = true;
            issuesFirstResponseAverageSeries.strokeWidth = 4;
            issuesFirstResponseAverageSeries.tensionX = 0.8;

            var issuesFirstResponseAverageSeries2 = issuesFirstResponseAverageChart.series.push(new am4charts.LineSeries());
            issuesFirstResponseAverageSeries2.name = "Response time (median)";
            issuesFirstResponseAverageSeries2.dataFields.dateX = "GroupName";
            issuesFirstResponseAverageSeries2.dataFields.valueY = "IssueMedianFirstCommentTimesInHours";
            issuesFirstResponseAverageSeries2.sequencedInterpolation = true;
            issuesFirstResponseAverageSeries2.stroke = issuesFirstResponseAverageChart.colors.getIndex(4);
            issuesFirstResponseAverageSeries2.strokeWidth = 4;
            issuesFirstResponseAverageSeries2.tensionX = 0.8;

            var issuesFirstResponseAverageSeries3 = issuesFirstResponseAverageChart.series.push(new am4charts.LineSeries());
            issuesFirstResponseAverageSeries3.name = "Target response time";
            issuesFirstResponseAverageSeries3.dataFields.dateX = "GroupName";
            issuesFirstResponseAverageSeries3.dataFields.valueY = "TargetFirstCommentTimeInHours";
            issuesFirstResponseAverageSeries3.sequencedInterpolation = true;
            issuesFirstResponseAverageSeries3.stroke = issuesFirstResponseAverageChart.colors.getIndex(6);
            issuesFirstResponseAverageSeries3.strokeWidth = 4;
            issuesFirstResponseAverageSeries3.tensionX = 0.8;

            issuesFirstResponseAverageChart.cursor = new am4charts.XYCursor();

            ////////////////////////////////////////////////////////////////////////////////////////////////////

            var issuesClosingAverageChart = am4core.create("IssuesClosingTime", am4charts.XYChart);
    issuesClosingAverageChart.dataSource.url = "/umbraco/api/IssuesStatistics/GetGroupedIssuesData/?fromDay=0&fromMonth=@(fromMonth)&fromYear=@(fromYear)&toDay=0&toMonth=@(toMonth)&toYear=@(toYear)&repository=@(repoQuerystring)";
    
            issuesClosingAverageChart.scrollbarX = new am4core.Scrollbar();
            issuesClosingAverageChart.legend = new am4charts.Legend();

            var issuesClosingAverageDateAxis = issuesClosingAverageChart.xAxes.push(new am4charts.DateAxis());
            var issuesClosingAverageValueAxis = issuesClosingAverageChart.yAxes.push(new am4charts.ValueAxis());
    
            var issuesClosingAverageSeries = issuesClosingAverageChart.series.push(new am4charts.LineSeries());
            issuesClosingAverageSeries.name = "Closing time (average)";
            issuesClosingAverageSeries.dataFields.dateX = "GroupName";
            issuesClosingAverageSeries.dataFields.valueY = "IssueAverageClosingTimeInHours";
            issuesClosingAverageSeries.sequencedInterpolation = true;
            issuesClosingAverageSeries.strokeWidth = 4;
            issuesClosingAverageSeries.tensionX = 0.8;

            var issuesClosingAverageSeries2 = issuesClosingAverageChart.series.push(new am4charts.LineSeries());
            issuesClosingAverageSeries2.name = "Closing time (median)";
            issuesClosingAverageSeries2.dataFields.dateX = "GroupName";
            issuesClosingAverageSeries2.dataFields.valueY = "IssueMedianClosingTimeInHours";
            issuesClosingAverageSeries2.sequencedInterpolation = true;
            issuesClosingAverageSeries2.stroke = issuesClosingAverageChart.colors.getIndex(4);
            issuesClosingAverageSeries2.strokeWidth = 4;
            issuesClosingAverageSeries2.tensionX = 0.8;

            var issuesClosingAverageSeries3 = issuesClosingAverageChart.series.push(new am4charts.LineSeries());
            issuesClosingAverageSeries3.name = "Target closing time";
            issuesClosingAverageSeries3.dataFields.dateX = "GroupName";
            issuesClosingAverageSeries3.dataFields.valueY = "TargetClosingTimeInHours";
            issuesClosingAverageSeries3.sequencedInterpolation = true;
            issuesClosingAverageSeries3.stroke = issuesClosingAverageChart.colors.getIndex(6);
            issuesClosingAverageSeries3.strokeWidth = 4;
            issuesClosingAverageSeries3.tensionX = 0.8;

            issuesClosingAverageChart.cursor = new am4charts.XYCursor();

    
</script>*@

@functions
{
    // From: https://stackoverflow.com/a/29206643/5018

    public string BuildQueryStringUrl(string[] newQueryStringArr)
    {
        var url = Request.RawUrl;
        string plainUrl;
        var queryString = string.Empty;

        var newQueryString = string.Join("&", newQueryStringArr);

        if (url.Contains("?"))
        {
            var index = url.IndexOf('?');
            plainUrl = url.Substring(0, index); //URL With No QueryString
            queryString = url.Substring(index + 1);
        }
        else
        {
            plainUrl = url;
        }

        var nvc = HttpUtility.ParseQueryString(queryString);
        var qscoll = HttpUtility.ParseQueryString(newQueryString);

        var queryData = string.Join("&",
            nvc.AllKeys.Where(key => !qscoll.AllKeys.Any(newKey => newKey.Contains(key))).
                Select(key => string.Format("{0}={1}",
                    HttpUtility.UrlEncode(key), HttpUtility.UrlEncode(nvc[key]))).ToArray());
        //Fetch Existing QueryString Except New QueryString

        var delimiter = nvc.HasKeys() && !string.IsNullOrEmpty(queryData) ? "&" : string.Empty;
        var queryStringToAppend = "?" + newQueryString + delimiter + queryData;

        return plainUrl + queryStringToAppend;
    }
}