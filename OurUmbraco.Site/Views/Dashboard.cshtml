@using System.Activities.Debugger
@using OurUmbraco.Forum.Extensions
@using OurUmbraco.Our.Extensions
@using OurUmbraco.Our.Services
@using System.Globalization
@inherits UmbracoTemplatePage
@{
    Layout = "Master.cshtml";
    if (Members.IsTeamUmbraco() == false)
    {
        Response.Redirect("/");
    }

    var showPulls = false;
    var showPullsQueryString = Request.QueryString["pulls"];
    if (string.IsNullOrWhiteSpace(showPullsQueryString) == false && showPullsQueryString == "true")
    {
        showPulls = true;
    }

    var repoManagementService = new RepositoryManagementService();
    var allOpenIssues = repoManagementService.GetAllOpenIssues(showPulls);

    var repositories = allOpenIssues.SelectMany(x => x.Issues).Select(x => x.RepositoryName).Distinct().ToList();

    var repoQuerystring = Request.QueryString["repository"];

    List<RepositoryManagementService.GitHubCategorizedIssues> categorizedIssues = null;

    if (string.IsNullOrWhiteSpace(repoQuerystring) == false)
    {
        allOpenIssues.ForEach(x => x.Issues.RemoveAll(y => y.RepositoryName.InvariantEquals(repoQuerystring) == false));
    }

    categorizedIssues = allOpenIssues.OrderBy(x => x.SortOrder).ToList();


    var totalIssues = 0;
    foreach (var categories in categorizedIssues)
    {
        totalIssues = totalIssues + categories.Issues.Count;
    }

    var fromMonth = DateTime.Now.AddYears(-1).Month;
    var fromYear = DateTime.Now.AddYears(-1).Year;

    var toMonth = DateTime.Now.Month;
    var toYear = DateTime.Now.Year;
}

<style type="text/css">
    .page, .container {
        max-width: none;
        padding: 0;
        margin: 0;
    }

    .flex-container {
        display: flex;
        flex-direction: column;
        font-size: 14px;
        margin: 0 4px 0 0;
        float: left;
    }

        .flex-container h5 {
            max-width: 306px;
        }
        
        .flex-container div.issue a {
            overflow-wrap: break-word;
        }

        .flex-container div.issue {
            max-width: 306px;
            float: left;
            padding: 4px;
            margin-bottom: 4px;
            border: 1px solid silver;
            border-radius: 8px;
        }
        
        .flex-container div.issue.error {
            border-color: red;
        }

        .flex-container div.author {
            max-width: 46px;
            float: left;
        }

        .flex-container div.details {
            max-width: 250px;
            float: left;
        }

        .flex-container .author img {
            width: 40px;
            height: 40px;
            margin: 0 6px 0 0;
            float: left;
            border-radius: 20px;
        }

        .flex-container a {
            color: #FF6E00;
            text-decoration: none;
            font-weight: bold;
        }


    .assignees {
        float: right;
    }

        .assignees img {
            width: 20px;
            height: 20px;
            margin: 1px;
            border-radius: 10px;
        }

    .labels {
        float: left;
        margin: 2px;
        clear: both;
    }

    span.label {
        padding: 4px;
        font-size: 10px;
        border-radius: 4px;
        margin-top: 2px;
        display: inline-block;
    }


    .flex-container small, .overview small.comment {
        font-size: 10px;
        float: left;
    }

    span.error {
        color: red;
    }


    .gauge {
        height: 250px;
        width: 350px;
    }

    .chart {
        height: 500px;
        width: 100%;
        clear: both;
        display: block;
    }

    .stats {
        height: 550px;
        display: inline-block;
        width: 100%;
        clear: both;
    }

    #body {
        margin-bottom: 50px;
    }

    fieldset {
        float: left;
        margin-right: 8px;
    }

    section.form, .row {
        margin: 0;
        padding: 0;
    }
</style>
<script src="/scripts/amcharts/core.js"></script>
<script src="/scripts/amcharts/charts.js"></script>

<div id="body" class="page markdown-syntax">
    <div>
        @Html.Action("Render", "Breadcrumb", new { linkToCurrent = false })
    </div>

    @if (showPulls)
    {
        <h1>Pull requests status - @totalIssues open PRs</h1>
    }
    else
    {
        <h1>Issue tracker status - @totalIssues open issues</h1>
    }

    <section class="form">
        <div class="container">
            <div class="row form">
                <div class="col-md-12">
                    <form method="get">
                        <fieldset>
                            <p>
                                <input type="radio" id="pulls_issues" name="pulls" value="false" checked="@(!showPulls)" /><label for="pulls_issues"> Issues</label>
                                <input type="radio" id="pulls_pulls" name="pulls" value="true" checked="@showPulls" /><label for="pulls_pulls"> Pull requests </label>
                            </p>
                        </fieldset>
                        <fieldset>
                            <p>
                                <select name="repository">
                                    <option value="">Filter by repository</option>
                                    @foreach (var repo in repositories)
                                    {
                                        <option value="@repo" selected="@(repoQuerystring == repo)">@repo</option>
                                    }
                                </select>

                            </p>
                        </fieldset>
                        <fieldset>
                            <input type="submit" class="button" value="Filter" />
                        </fieldset>
                    </form>
                </div>
            </div>
        </div>
    </section>

    <section>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    @foreach (var category in categorizedIssues.Where(x => x.Issues.Any()))
                    {
                        <div class="flex-container">

                            <h5>@category.CategoryDescription (@category.Issues.Count issues)</h5>


                            @foreach (var issue in category.Issues.OrderByDescending(x => x.CreateDateTime))
                            {
                                <div class="issue @(issue.NeedsTeamUmbracoReply ? "error" : null)">
                                    <div class="author">
                                        <a href="https://github.com/@issue.User.Login" target="_blank">
                                            <img src="@issue.User.AvatarUrl" title="@issue.User.Login" />
                                        </a>
                                    </div>
                                    <div class="details">
                                        <span class="assignees">
                                            @foreach (var assignee in issue.Assignees)
                                            {
                                                <a href="https://github.com/@assignee.Login" target="_blank">
                                                    <img src="@assignee.AvatarUrl" title="Assigned to @assignee.Login" />
                                                </a>
                                            }
                                        </span>
                                        <a href="@issue.Link" target="_blank" title="@issue.Description">@issue.Title #@issue.Number</a><br />
                                        <small class="comment">@issue.RepositoryName</small><br />
                                        <small>
                                            @{
                                                var dateCssClass = string.Empty;
                                                var businessDays = issue.CreateDateTime.ToLocalTime().DateTime.BusinessDaysSince();
                                            }
                                            @if (category.CategoryKey == RepositoryManagementService.CategoryKey.NoReply)
                                            {
                                                if (businessDays > 2)
                                                {
                                                    dateCssClass = "error";
                                                }
                                            }
                                            <span @(dateCssClass != string.Empty ? "class=" + dateCssClass : null)>
                                                <span title="Created: @issue.CreateDateTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture) | Updated: @issue.UpdateDateTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture)">Created ~@businessDays business @(businessDays > 1 ? "days" : "day") ago.</span>
                                                @if (issue.InThisCategorySince != null)
                                                {
                                                    <br />
                                                    <span title="Since: @issue.InThisCategorySince.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture)">In this category for ~@(issue.InThisCategorySince.Value.BusinessDaysSince()) business days.</span>
                                                }
                                            </span>
                                        </small>
                                        <div class="labels">
                                            @foreach (var label in issue.Labels)
                                            {
                                                <span class="label" style="background-color: #@label.Color">@label.Name</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>

    @if (showPulls == false)
    {
        <section class="stats">
            <div class="container">
                <div class="row">
                    <h5>Issues: created and closed</h5>
                    <div class="col-md-12">
                        <div id="GroupedIssues" class="chart"></div>
                    </div>
                </div>
            </div>
        </section>
    }

</div>

<script>
       var groupedPrsChart = am4core.create("GroupedIssues", am4charts.XYChart);
            groupedPrsChart.dataSource.url = "/umbraco/api/IssuesStatistics/GetGroupedIssuesData/?fromDay=0&fromMonth=@(fromMonth)&fromYear=@(fromYear)&toDay=0&toMonth=@(toMonth)&toYear=@(toYear)";

            groupedPrsChart.scrollbarX = new am4core.Scrollbar();
            groupedPrsChart.legend = new am4charts.Legend();
            groupedPrsChart.colors.step = 2;

            var categoryAxis = groupedPrsChart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "GroupName";
            categoryAxis.renderer.grid.template.location = 0;

            var valueAxis = groupedPrsChart.yAxes.push(new am4charts.ValueAxis());
            valueAxis.min = 0;
            valueAxis.renderer.minWidth = 35;

            var prsClosed = groupedPrsChart.series.push(new am4charts.ColumnSeries());
            prsClosed.name = "Issues closed";
            prsClosed.dataFields.categoryX = "GroupName";
            prsClosed.dataFields.valueY = "NumberClosed";
            prsClosed.stacked = true;

            var prsClosedColumnTemplate = prsClosed.columns.template;
            prsClosedColumnTemplate.width = am4core.percent(80);
            prsClosedColumnTemplate.tooltipText = "{name}: {valueY.value}";

            var prsCreated = groupedPrsChart.series.push(new am4charts.ColumnSeries());
            prsCreated.name = "Issues created";
            prsCreated.dataFields.categoryX = "GroupName";
            prsCreated.dataFields.valueY = "NumberCreated";
            prsCreated.stacked = false;

            var prsCreatedColumnTemplate = prsCreated.columns.template;
            prsCreatedColumnTemplate.width = am4core.percent(80);
            prsCreatedColumnTemplate.tooltipText = "{name}: {valueY.value}";
</script>
